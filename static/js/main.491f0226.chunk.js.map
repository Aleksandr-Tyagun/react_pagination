{"version":3,"sources":["Pagination/Pagination.js","App.js","index.js"],"names":["Pagination","this","props","total","perPage","page","onPageChange","pagesCount","Math","ceil","className","onClick","type","disabled","Array","map","e","index","key","uuidv4","PureComponent","App","state","pageId","pagesTotal","setState","handleTotal","target","value","handlePerPage","handlePage","elements","i","push","id","content","onChange","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.491f0226.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport './Pagination.css';\n\nclass Pagination extends PureComponent {\n  render() {\n    const { total, perPage, page, onPageChange } = this.props;\n    const pagesCount = Math.ceil(total / perPage);\n\n    return (\n      <div className=\"pagination\">\n        <button\n          onClick={() => onPageChange(page - 1)}\n          className=\"pagination__button\"\n          type=\"button\"\n          disabled={page === 1}\n        >\n          &lt;\n        </button>\n        {[...Array(pagesCount)].map((e, index) => (\n          <button\n            key={uuidv4()}\n            className={\n              index + 1 === page\n                ? 'pagination__button pagination__button--selected'\n                : 'pagination__button'}\n            type=\"button\"\n            onClick={() => onPageChange(index + 1)}\n          >\n            {index + 1}\n          </button>\n        ))}\n        <button\n          onClick={() => onPageChange(page + 1)}\n          className=\"pagination__button\"\n          type=\"button\"\n          disabled={page === pagesCount}\n        >\n          &gt;\n        </button>\n      </div>\n    );\n  }\n}\n\nPagination.propTypes = {\n  total: PropTypes.number.isRequired,\n  perPage: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default Pagination;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Pagination from './Pagination/Pagination';\n\nclass App extends Component {\n  state = {\n    total: 42,\n    perPage: 5,\n    page: 1,\n  }\n\n  onPageChange = (pageId) => {\n    const { total, perPage } = this.state;\n    const pagesTotal = Math.ceil(total / perPage);\n    let page = pageId;\n\n    if (pageId < 1) {\n      page = 1;\n    }\n\n    if (pageId > pagesTotal) {\n      page = pagesTotal;\n    }\n\n    this.setState({ page });\n  }\n\n  handleTotal = (e) => {\n    let total = +e.target.value;\n\n    if (total < 1) {\n      total = 1;\n    }\n\n    this.setState({ total });\n  }\n\n  handlePerPage = (e) => {\n    const { total } = this.state;\n    let perPage = +e.target.value;\n\n    if (perPage > total) {\n      perPage = total;\n    }\n\n    if (perPage < 1) {\n      perPage = 1;\n    }\n\n    this.setState({ perPage });\n  }\n\n  handlePage = (e) => {\n    const { total, perPage } = this.state;\n    let page = +e.target.value;\n    const pagesTotal = Math.ceil(total / perPage);\n\n    if (page < 1) {\n      page = 1;\n    }\n\n    if (page > pagesTotal) {\n      page = pagesTotal;\n    }\n\n    this.setState({ page });\n  }\n\n  render() {\n    const { total, perPage, page } = this.state;\n    const elements = [];\n\n    for (let i = 1; i <= total; i += 1) {\n      elements.push({\n        id: i,\n        content: `Element  #${i}`,\n      });\n    }\n\n    return (\n      <>\n        <h2>Settings</h2>\n        <label>\n          <span className=\"app__input-title\">\n            Elements amount\n          </span>\n          <input\n            className=\"app__input\"\n            value={total}\n            type=\"number\"\n            onChange={this.handleTotal}\n          />\n        </label>\n        <label>\n          <span className=\"app__input-title\">\n            Elements per page\n          </span>\n          <input\n            className=\"app__input\"\n            value={perPage}\n            type=\"number\"\n            onChange={this.handlePerPage}\n          />\n        </label>\n        <label>\n          <span className=\"app__input-title\">\n            Set page\n          </span>\n          <input\n            className=\"app__input\"\n            value={page}\n            type=\"number\"\n            onChange={this.handlePage}\n          />\n        </label>\n        <h1>\n          Current page #\n          {this.state.page}\n        </h1>\n        <h3>\n          Elements (\n          {(page * perPage) - perPage + 1}\n          {' '}\n          -\n          {' '}\n          {page * perPage}\n          )\n        </h3>\n        <div className=\"app__element-list\">\n          {elements.map(({ id, content }) => {\n            if (id >= (page * perPage) - perPage + 1 && id <= page * perPage) {\n              return (\n                <div\n                  key={id}\n                  className=\"app__element-item\"\n                >\n                  {content}\n                </div>\n              );\n            }\n\n            return false;\n          })}\n        </div>\n        <Pagination\n          total={total}\n          perPage={perPage}\n          page={page}\n          onPageChange={this.onPageChange}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}